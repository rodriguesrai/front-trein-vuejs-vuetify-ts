name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - TREIN-210/pipeline-front

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  IMG_NAME: front-trein-vuejs-vuetify-ts

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:unit --passWithNoTests

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Login to Github Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMG_NAME }}:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/${{ env.IMG_NAME }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{ env.IMG_NAME }}:latest

      - name: List Docker images
        run: docker images

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMG_NAME }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMG_NAME }}:latest

  # deploy:
  #   name: Deploy to AWS CloudFront
  #   runs-on: ubuntu-latest
  #   needs: build-and-push

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Deploy to AWS CloudFront
  #       run: |
  #         aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
